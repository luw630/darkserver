// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerdata.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playerdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playerdata_2eproto() {
  protobuf_AddDesc_playerdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playerdata.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerData_descriptor_ = file->message_type(0);
  static const int PlayerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, bisnewplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, skillindex_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playerdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playerdata_2eproto() {
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
}

void protobuf_AddDesc_playerdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020playerdata.proto\"W\n\nPlayerData\022\013\n\003sid\030"
    "\001 \002(\r\022\022\n\nPlayerName\030\002 \002(\t\022\024\n\014bisnewplaye"
    "r\030\003 \002(\010\022\022\n\nSkillIndex\030\004 \003(\005", 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playerdata.proto", &protobuf_RegisterTypes);
  PlayerData::default_instance_ = new PlayerData();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playerdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playerdata_2eproto {
  StaticDescriptorInitializer_playerdata_2eproto() {
    protobuf_AddDesc_playerdata_2eproto();
  }
} static_descriptor_initializer_playerdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kSidFieldNumber;
const int PlayerData::kPlayerNameFieldNumber;
const int PlayerData::kBisnewplayerFieldNumber;
const int PlayerData::kSkillIndexFieldNumber;
#endif  // !_MSC_VER

PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerData)
}

void PlayerData::InitAsDefaultInstance() {
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerData)
}

void PlayerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bisnewplayer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerdata_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sid_, bisnewplayer_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skillindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }

      // required string PlayerName = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bisnewplayer;
        break;
      }

      // required bool bisnewplayer = 3;
      case 3: {
        if (tag == 24) {
         parse_bisnewplayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisnewplayer_)));
          set_has_bisnewplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SkillIndex;
        break;
      }

      // repeated int32 SkillIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_SkillIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_skillindex())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SkillIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerData)
  // required uint32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sid(), output);
  }

  // required string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // required bool bisnewplayer = 3;
  if (has_bisnewplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bisnewplayer(), output);
  }

  // repeated int32 SkillIndex = 4;
  for (int i = 0; i < this->skillindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->skillindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerData)
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerData)
  // required uint32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sid(), target);
  }

  // required string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required bool bisnewplayer = 3;
  if (has_bisnewplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bisnewplayer(), target);
  }

  // repeated int32 SkillIndex = 4;
  for (int i = 0; i < this->skillindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->skillindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerData)
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // required string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required bool bisnewplayer = 3;
    if (has_bisnewplayer()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 SkillIndex = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillindex(i));
    }
    total_size += 1 * this->skillindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillindex_.MergeFrom(from.skillindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_bisnewplayer()) {
      set_bisnewplayer(from.bisnewplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(playername_, other->playername_);
    std::swap(bisnewplayer_, other->bisnewplayer_);
    skillindex_.Swap(&other->skillindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}

PlayerData* PlayerData::CreateByString(const char* SerializeStr) const
{
	PlayerData   *pData = new PlayerData;
	if (pData->ParseFromString(SerializeStr))
	{
		return pData;
	}
	return nullptr;
}



// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
