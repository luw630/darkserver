// desdec.cpp : Defines the entry point for the console application.
//

#include "des.h"

namespace ctech
{
	namespace utility
	{
		namespace detail
		{
			#ifdef _MSC_VER

			#include <windows.h>
			#pragma intrinsic(_lrotl)

			#elif defined(__GNUC__) && defined(__i386__)

			static inline uint32_t _lrotl(uint32_t i, int n)
			{
				__asm__("roll %%cl,%0"
					:"=r" (i)
					:"0" (i), "c" (i));
				return i;
			}

			#endif

			uint32_t enc_key[] = 
			{
				0x3bef6ba9, 0x0eb1007d, 0x6a3488c5, 0x6bdc00e6,
				0xef6ba9f1, 0xb17d003b, 0x3488c50e, 0xdce6006a,
				0x6ba9f16b, 0x7d3b00ef, 0x88c50eb1, 0xe66a0034,
				0xa9f16bdc, 0x3bef006b, 0xc50eb17d, 0x6a340088,
				0xf16bdce6
			};

			uint32_t dec_key[] = 
			{
				0xf16bdce6, 0x6a340088, 0xc50eb17d, 0x3bef006b,
				0xa9f16bdc, 0xe66a0034, 0x88c50eb1, 0x7d3b00ef,
				0x6ba9f16b, 0xdce6006a, 0x3488c50e, 0xb17d003b,
				0xef6ba9f1, 0x6bdc00e6, 0x6a3488c5, 0x0eb1007d,
				0x3bef6ba9
			};

			uint8_t f[] = 
			{
				0x20, 0x89, 0xEF, 0xBC, 0x66, 0x7D, 0xDD, 0x48, 0xD4, 0x44, 0x51, 0x25, 0x56, 0xED, 0x93, 0x95, 
				0x46, 0xE5, 0x11, 0x7C, 0x73, 0xCF, 0x21, 0x14, 0x7A, 0x8F, 0x19, 0xD7, 0x33, 0xB7, 0x8A, 0x8E,
				0x92, 0xD3, 0x6E, 0xAD, 0x01, 0xE4, 0xBD, 0x0E, 0x67, 0x4E, 0xA2, 0x24, 0xFD, 0xA7, 0x74, 0xFF,
				0x9E, 0x2D, 0xB9, 0x32, 0x62, 0xA8, 0xFA, 0xEB, 0x36, 0x8D, 0xC3, 0xF7, 0xF0, 0x3F, 0x94, 0x02,
				0xE0, 0xA9, 0xD6, 0xB4, 0x3E, 0x16, 0x75, 0x6C, 0x13, 0xAC, 0xA1, 0x9F, 0xA0, 0x2F, 0x2B, 0xAB,
				0xC2, 0xAF, 0xB2, 0x38, 0xC4, 0x70, 0x17, 0xDC, 0x59, 0x15, 0xA4, 0x82, 0x9D, 0x08, 0x55, 0xFB,
				0xD8, 0x2C, 0x5E, 0xB3, 0xE2, 0x26, 0x5A, 0x77, 0x28, 0xCA, 0x22, 0xCE, 0x23, 0x45, 0xE7, 0xF6,
				0x1D, 0x6D, 0x4A, 0x47, 0xB0, 0x06, 0x3C, 0x91, 0x41, 0x0D, 0x4D, 0x97, 0x0C, 0x7F, 0x5F, 0xC7,
				0x39, 0x65, 0x05, 0xE8, 0x96, 0xD2, 0x81, 0x18, 0xB5, 0x0A, 0x79, 0xBB, 0x30, 0xC1, 0x8B, 0xFC,
				0xDB, 0x40, 0x58, 0xE9, 0x60, 0x80, 0x50, 0x35, 0xBF, 0x90, 0xDA, 0x0B, 0x6A, 0x84, 0x9B, 0x68,
				0x5B, 0x88, 0x1F, 0x2A, 0xF3, 0x42, 0x7E, 0x87, 0x1E, 0x1A, 0x57, 0xBA, 0xB6, 0x9A, 0xF2, 0x7B,
				0x52, 0xA6, 0xD0, 0x27, 0x98, 0xBE, 0x71, 0xCD, 0x72, 0x69, 0xE1, 0x54, 0x49, 0xA3, 0x63, 0x6F,
				0xCC, 0x3D, 0xC8, 0xD9, 0xAA, 0x0F, 0xC6, 0x1C, 0xC0, 0xFE, 0x86, 0xEA, 0xDE, 0x07, 0xEC, 0xF8,
				0xC9, 0x29, 0xB1, 0x9C, 0x5C, 0x83, 0x43, 0xF9, 0xF5, 0xB8, 0xCB, 0x09, 0xF1, 0x00, 0x1B, 0x2E,
				0x85, 0xAE, 0x4B, 0x12, 0x5D, 0xD1, 0x64, 0x78, 0x4C, 0xD5, 0x10, 0x53, 0x04, 0x6B, 0x8C, 0x34,
				0x3A, 0x37, 0x03, 0xF4, 0x61, 0xC5, 0xEE, 0xE3, 0x76, 0x31, 0x4F, 0xE6, 0xDF, 0xA5, 0x99, 0x3B
			};

			inline uint32_t lookup(uint32_t p)
			{
				return f[(uint8_t)(p)] | (f[(uint8_t)(p>>8)] << 8)
					| (f[(uint8_t)(p>>16)] << 16) 
					| (f[(uint8_t)(p>>24)] << 24);
			}

			void des(uint32_t* buffer, const uint32_t* key)
			{
				uint32_t left = *buffer;
				uint32_t right = *(buffer + 1);

				for (size_t i = 0; i < 8; i++)
				{
					uint32_t tmp = *key++ ^ left;
					right ^= lookup(tmp);
					
					tmp = *key++ | ((right & 0xff) << 8);
					tmp = lookup(tmp ^ right);
					left ^= _lrotl(tmp, 8);
				}

				uint32_t tmp = *key ^ left;
				right ^= lookup(tmp);

				*buffer = left;
				*(buffer + 1) = right;
			}
		}
	}
}

extern "C" {

char s_dwCrc32Table[1024+1] = 
    "\x0CE\x0FA\x0DE\x0BA\x58\x0CA\x0D9\x0CD\x0E2\x9B\x0D0\x54\x74\x0AB\x0D7\x23"
    "\x0D7\x3E\x0B3\x0BD\x41\x0E\x0B4\x0CA\x0FB\x5F\x0BD\x53\x6D\x6F\x0BA\x24"
    "\x0FC\x72\x5\x0B4\x6A\x42\x2\x0C3\x0D0\x13\x0B\x5A\x46\x23\x0C\x2D"
    "\x0E5\x0B6\x68\x0B3\x73\x86\x6F\x0C4\x0C9\x0D7\x66\x5D\x5F\x0E7\x61\x2A"
    "\x0AA\x0EA\x69\x0A7\x3C\x0DA\x6E\x0D0\x86\x8B\x67\x49\x10\x0BB\x60\x3E"
    "\x0B3\x2E\x4\x0A0\x25\x1E\x3\x0D7\x9F\x4F\x0A\x4E\x9\x7F\x0D\x39"
    "\x98\x62\x0B2\x0A9\x0E\x52\x0B5\x0DE\x0B4\x3\x0BC\x47\x22\x33\x0BB\x30"
    "\x81\x0A6\x0DF\x0AE\x17\x96\x0D8\x0D9\x0AD\x0C7\x0D1\x40\x3B\x0F7\x0D6\x37"
    "\x6\x0DA\x0B0\x81\x90\x0EA\x0B7\x0F6\x2A\x0BB\x0BE\x6F\x0BC\x8B\x0B9\x18"
    "\x1F\x1E\x0DD\x86\x89\x2E\x0DA\x0F1\x33\x7F\x0D3\x68\x0A5\x4F\x0D4\x1F"
    "\x34\x52\x6B\x8F\x0A2\x62\x6C\x0F8\x18\x33\x65\x61\x8E\x3\x62\x16"
    "\x2D\x96\x6\x88\x0BB\x0A6\x1\x0FF\x1\x0F7\x8\x66\x97\x0C7\x0F\x11"
    "\x62\x0CA\x7\x9C\x0F4\x0FA\x0\x0EB\x4E\x0AB\x9\x72\x0D8\x9B\x0E\x5"
    "\x7B\x0E\x6A\x9B\x0ED\x3E\x6D\x0EC\x57\x6F\x64\x75\x0C1\x5F\x63\x2"
    "\x50\x42\x0DC\x92\x0C6\x72\x0DB\x0E5\x7C\x23\x0D2\x7C\x0EA\x13\x0D5\x0B"
    "\x49\x86\x0B1\x95\x0DF\x0B6\x0B6\x0E2\x65\x0E7\x0BF\x7B\x0F3\x0D7\x0B8\x0C"
    "\x5E\x0BB\x2\x0CC\x0C8\x8B\x5\x0BB\x72\x0DA\x0C\x22\x0E4\x0EA\x0B\x55"
    "\x47\x7F\x6F\x0CB\x0D1\x4F\x68\x0BC\x6B\x1E\x61\x25\x0FD\x2E\x66\x52"
    "\x6C\x33\x0D9\x0C2\x0FA\x3\x0DE\x0B5\x40\x52\x0D7\x2C\x0D6\x62\x0D0\x5B"
    "\x75\x0F7\x0B4\x0C5\x0E3\x0C7\x0B3\x0B2\x59\x96\x0BA\x2B\x0CF\x0A6\x0BD\x5C"
    "\x3A\x0AB\x0B5\x0D1\x0AC\x9B\x0B2\x0A6\x16\x0CA\x0BB\x3F\x80\x0FA\x0BC\x48"
    "\x23\x6F\x0D8\x0D6\x0B5\x5F\x0DF\x0A1\x0F\x0E\x0D6\x38\x99\x3E\x0D1\x4F"
    "\x8\x23\x6E\x0DF\x9E\x13\x69\x0A8\x24\x42\x60\x31\x0B2\x72\x67\x46"
    "\x11\x0E7\x3\x0D8\x87\x0D7\x4\x0AF\x3D\x86\x0D\x36\x0AB\x0B6\x0A\x41"
    "\x96\x9B\x6C\x0F7\x0\x0AB\x6B\x80\x0BA\x0FA\x62\x19\x2C\x0CA\x65\x6E"
    "\x8F\x5F\x1\x0F0\x19\x6F\x6\x87\x0A3\x3E\x0F\x1E\x35\x0E\x8\x69"
    "\x0A4\x13\x0B7\x0F9\x32\x23\x0B0\x8E\x88\x72\x0B9\x17\x1E\x42\x0BE\x60"
    "\x0BD\x0D7\x0DA\x0FE\x2B\x0E7\x0DD\x89\x91\x0B6\x0D4\x10\x7\x86\x0D3\x67"
    "\x0F2\x8B\x0DB\x0EA\x64\x0BB\x0DC\x9D\x0DE\x0EA\x0D5\x4\x48\x0DA\x0D2\x73"
    "\x0EB\x4F\x0B6\x0ED\x7D\x7F\x0B1\x9A\x0C7\x2E\x0B8\x3\x51\x1E\x0BF\x74"
    "\x0C0\x3\x0\x0E4\x56\x33\x7\x93\x0EC\x62\x0E\x0A\x7A\x52\x9\x7D"
    "\x0D9\x0C7\x6D\x0E3\x4F\x0F7\x6A\x94\x0F5\x0A6\x63\x0D\x63\x96\x64\x7A"
    "\x0EE\x79\x66\x57\x78\x49\x61\x20\x0C2\x18\x68\x0B9\x54\x28\x6F\x0CE"
    "\x0F7\x0BD\x0B\x50\x61\x8D\x0C\x27\x0DB\x0DC\x5\x0BE\x4D\x0EC\x2\x0C9"
    "\x0DC\x0F1\x0BD\x59\x4A\x0C1\x0BA\x2E\x0F0\x90\x0B3\x0B7\x66\x0A0\x0B4\x0C0"
    "\x0C5\x35\x0D0\x5E\x53\x5\x0D7\x29\x0E9\x54\x0DE\x0B0\x7F\x64\x0D9\x0C7"
    "\x8A\x69\x0D1\x4A\x1C\x59\x0D6\x3D\x0A6\x8\x0DF\x0A4\x30\x38\x0D8\x0D3"
    "\x93\x0AD\x0BC\x4D\x5\x9D\x0BB\x3A\x0BF\x0CC\x0B2\x0A3\x29\x0FC\x0B5\x0D4"
    "\x0B8\x0E1\x0A\x44\x2E\x0D1\x0D\x33\x94\x80\x4\x0AA\x2\x0B0\x3\x0DD"
    "\x0A1\x25\x67\x43\x37\x15\x60\x34\x8D\x44\x69\x0AD\x1B\x74\x6E\x0DA"
    "\x26\x59\x8\x6C\x0B0\x69\x0F\x1B\x0A\x38\x6\x82\x9C\x8\x1\x0F5"
    "\x3F\x9D\x65\x6B\x0A9\x0AD\x62\x1C\x13\x0FC\x6B\x85\x85\x0CC\x6C\x0F2"
    "\x14\x0D1\x0D3\x62\x82\x0E1\x0D4\x15\x38\x0B0\x0DD\x8C\x0AE\x80\x0DA\x0FB"
    "\x0D\x15\x0BE\x65\x9B\x25\x0B9\x12\x21\x74\x0B0\x8B\x0B7\x44\x0B7\x0FC"
    "\x42\x49\x0BF\x71\x0D4\x79\x0B8\x6\x6E\x28\x0B1\x9F\x0F8\x18\x0B6\x0E8"
    "\x5B\x8D\x0D2\x76\x0CD\x0BD\x0D5\x1\x77\x0EC\x0DC\x98\x0E1\x0DC\x0DB\x0EF"
    "\x70\x0C1\x64\x7F\x0E6\x0F1\x63\x8\x5C\x0A0\x6A\x91\x0CA\x90\x6D\x0E6"
    "\x69\x5\x9\x78\x0FF\x35\x0E\x0F\x45\x64\x7\x96\x0D3\x54\x0\x0E1"
    "\x7E\x38\x0BA\x21\x0E8\x8\x0BD\x56\x52\x59\x0B4\x0CF\x0C4\x69\x0B3\x0B8"
    "\x67\x0FC\x0D7\x26\x0F1\x0CC\x0D0\x51\x4B\x9D\x0D9\x0C8\x0DD\x0AD\x0DE\x0BF"
    "\x4C\x0B0\x61\x2F\x0DA\x80\x66\x58\x60\x0D1\x6F\x0C1\x0F6\x0E1\x68\x0B6"
    "\x55\x74\x0C\x28\x0C3\x44\x0B\x5F\x79\x15\x2\x0C6\x0EF\x25\x5\x0B1"
    "\x1A\x28\x0D\x3C\x8C\x18\x0A\x4B\x36\x49\x3\x0D2\x0A0\x79\x4\x0A5"
    "\x3\x0EC\x60\x3B\x95\x0DC\x67\x4C\x2F\x8D\x6E\x0D5\x0B9\x0BD\x69\x0A2"
    "\x28\x0A0\x0D6\x32\x0BE\x90\x0D1\x45\x4\x0C1\x0D8\x0DC\x92\x0F1\x0DF\x0AB"
    "\x31\x64\x0BB\x35\x0A7\x54\x0BC\x42\x1D\x5\x0B5\x0DB\x8B\x35\x0B2\x0AC"
    "\x0B6\x18\x0D4\x1A\x20\x28\x0D3\x6D\x9A\x79\x0DA\x0F4\x0C\x49\x0DD\x83"
    "\x0AF\x0DC\x0B9\x1D\x39\x0EC\x0BE\x6A\x83\x0BD\x0B7\x0F3\x15\x8D\x0B0\x84"
    "\x84\x90\x0F\x14\x12\x0A0\x8\x63\x0A8\x0F1\x1\x0FA\x3E\x0C1\x6\x8D"
    "\x9D\x54\x62\x13\x0B\x64\x65\x64\x0B1\x35\x6C\x0FD\x27\x5\x6B\x8A"
    "\x0D2\x8\x63\x7\x44\x38\x64\x70\x0FE\x69\x6D\x0E9\x68\x59\x6A\x9E"
    "\x0CB\x0CC\x0E\x0\x5D\x0FC\x9\x77\x0E7\x0AD\x0\x0EE\x71\x9D\x7\x99"
    "\x0E0\x80\x0B8\x9\x76\x0B0\x0BF\x7E\x0CC\x0E1\x0B6\x0E7\x5A\x0D1\x0B1\x90"
    "\x0F9\x44\x0D5\x0E\x6F\x74\x0D2\x79\x0D5\x25\x0DB\x0E0\x43\x15\x0DC\x97";

    DWORD _get_dval( DWORD v ) {
        return v * 0x343FD + 0x269EC3;
    }

    DWORD _GetCrc32( const char* ptr, DWORD size ) {
	    DWORD r = 0xffffffff;
	    for ( DWORD t = r; size > 0; --size ) {
		    t = ( ( t & 0xff ) ^ *ptr++ );
		    t = ((LPDWORD)s_dwCrc32Table)[t] ^ 0xBADEFACE;
		    r = ( r >> 8 ) ^ t;
	    }
	    return r ^ 0xDEADBABE;
    }
};